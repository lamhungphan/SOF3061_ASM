import { defineStore } from 'pinia';
import { ref } from 'vue';
import axios from 'axios';

export const useCartStore = defineStore('cart', () => {
  const cart = ref([]);

  // üõç L·∫•y gi·ªè h√†ng t·ª´ API
  const fetchCart = async (userId) => {
    try {
      const response = await axios.get(`http://localhost:8080/cart/${userId}`);
      cart.value = Array.isArray(response.data.data) ? response.data.data : (response.data.data ? [response.data.data] : []);
      console.log('D·ªØ li·ªáu gi·ªè h√†ng:', cart.value);
    } catch (error) {
      console.error('L·ªói khi l·∫•y gi·ªè h√†ng:', error.response?.data || error.message);
    }
  };

  // üõí G·ª≠i API th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
  const addToCart = async (userId, productId, quantity) => {
    try {
      const existingItem = cart.value.find(item => item.productId === productId);
  
      if (existingItem) {
        // N·∫øu s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
        await axios.put(`http://localhost:8080/cart/update`, {
          userId, 
          productId, 
          quantity: existingItem.quantity + quantity
        });
      } else {
        // N·∫øu s·∫£n ph·∫©m ch∆∞a t·ªìn t·∫°i, th√™m m·ªõi
        await axios.post('http://localhost:8080/cart/add', { userId, productId, quantity });
      }
  
      // L·∫•y l·∫°i gi·ªè h√†ng t·ª´ server ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë·ªìng b·ªô
      await fetchCart(userId);
      alert('Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng! üéâ');
    } catch (error) {
      console.error('L·ªói khi th√™m v√†o gi·ªè h√†ng:', error.response?.data || error.message);
      alert('L·ªói khi th√™m v√†o gi·ªè h√†ng!');
    }
  };

  // ‚ùå X√≥a 1 s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
  const removeFromCart = async (userId, productId) => {
    try {
      await axios.delete(`http://localhost:8080/cart/remove/${userId}/${productId}`);
      await fetchCart(userId);
    } catch (error) {
      console.error('L·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng:', error.response?.data || error.message);
    }
  };

  // üóë X√≥a to√†n b·ªô gi·ªè h√†ng c·ªßa user
  const clearCart = async (userId) => {
    try {
      await axios.delete(`http://localhost:8080/cart/clear/${userId}`);
      cart.value = [];
    } catch (error) {
      console.error('L·ªói khi x√≥a to√†n b·ªô gi·ªè h√†ng:', error.response?.data || error.message);
    }
  };

  return { cart, fetchCart, addToCart, removeFromCart, clearCart };
});